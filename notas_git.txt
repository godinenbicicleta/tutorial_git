---------------
Tutorial Git
---------------
NOTA: USAR EJEMPLO DE ESCRIBIT UNA HISTORIA
cada quien puede empezar con un repositorio para su historia
probamos comandos sencillos para cambiar titulos, escibir los datos de portada
despues usamos branches para crear un branch que sea la introducción y luego merge para ir construyendo la historia


Hay tres estados de trabajo en git:

Local
 1. Working Directory 
 2. Staging area
 3. Commit
Remoto
 Bitbucket

Configuracion:
 a) user name
    $ git config --global user.name "bruno carballo"
 b) email   
    $ git config --global user.email "bruno@descifra.mx"
 c) editor
    $ git config --global core.editor vim
    $ git config --global core.editor "subl -n -w" (es necesario editar variables del sistema)

 Para confirmar la configuración:
    $ git config --global --list

 .gitconfig
  contiene toda la configuración de git

To clone a repository:
  git clone "paste here the repo url"

Basic workflow:
  1. Clone repository
  2. Create a file: file.txt
  3. Check status: git status
  4. Add file.txt to staging area: git add file.txt, git status gives new file: file.txt
  5. Commit to the local repository: git commit -m "Add my first file: file.txt"
  6. git status gives ahead of origin/master
  7. git push origin master (origin:Bitbucket copy of our repository, master: the default branch)

To start a fresh project:
  $ git init fresh-project (creates an empty folder/repository called fresh-project)
  form inside an existing project:
    $ git init

To add all files to staging area:
 $ git add .

To clone an existing project:
  $ cd /repos
  $ git clone https://bitbucket...

Basic workflow:
  $ touch file.txt
  $ git status
  $ git add file.txt
  $ git commit -m 'cambios'
  $ git pull [origin] [master] (opcional pero es buena practica)
  $ git push [origin] [master]

It may be that not all files are being tracked, to list all files git is tracking:
  $git ls-files

What happens if I add a file and then make changes?
think of add as adding changes:
  $ touch prueba.txt
  $ git add prueba.txt
  $ echo 'hola' >> prueba.txt
  $ git status shows changes untracked and changes to be commited
  $ git add prueba
  $ git commit

Adding changes recursively.
This is needed when we make changes inside a folder that is inside a folder that is...
 $ git add .    #this will add all files recursively

If I want to revert changes from a file:
 $ touch hola.txt | git add hola.txt | git commit hola.txt
 $ echo 'hola'>> hola.txt
 $ git add hola.txt
 $ git reset HEAD hola.txt    #removes hola.txt from staging area
 $ git checkout -- hola.txt   #removes changes and returns file last commited

Moving and copying files, be careful with renaming and changing at same time
  $ git mv nombre.txt renombre.txt # renames a file
  $ git add | git commit

If we use only mv, git thinks you deleted and then created a new file, to save changes we need
  $ git add -A
this adds changes recursively but also updates all the files (renamed moved or deleted)

Two git mv commands equals to doing nothing
 $ git mv hola.txt holo.txt
 $ git mv holo.txt hola.txt

git mv cn be used both to rename and/or move

git add -A = git add . + git add -u
git add . = add all files (existing, modified and new but does not remove files that have been deleted)
git add -u = adds currently tracked files only (which have been modified) to the staging area and checks if they have been deleted

To delete files using git:
  $ git rm file
git rm only works if file is already being tracked so use rm instead

To recover a file that was deleted using git rm file but has not been commited
  $ git reset file
  $ git checkout -- file

If we delete using rm file the we need git add -A to add that change to staging area

Git's History:
 $ git log gives us the history of our commits
 $ git log --abbrev-commit
 $ git log --oneline --graph --decorate

to list only certain commits:
 $ git log ae6f872...761b911

to see only one file's history:
 $ git log -- file

to see from a certain day to the present:
 $ git log --since="3 days ago"

with --follow we can follow renames
 $ git --follow file

to show the complete commit message, author, what changed, etc:
 $ git show b613ehbedkwbhcwy8vwbvudbwav78gerv

to create an alias named hist:
 $ git config --global alias.hist "log --all --graph --oneline --decorate"   (note alias.alias_name)

to ignore unwanted files create a .gitignore file in the repository
 $ nano .gitignore

.gitignore should have one pattern per line:
  Myfile.txt        #ignores Myfile.txt
  *.ext             # ignores all files ending with .ext
  my-folder         # ignores everything iside my-folder/

Comparing different "states" of a file:

To show the differences between changes in working directory vs changes in staging area:
 $ git diff

To show differences between working directory and the last commit in the local repository
 $ git diff HEAD

To show differences between staging area and last commit in local repository:
 $ git diff --staged HEAD

To show only differences for one file (between working dir and staging area):
 $ git diff -- README.md

To show differences between commit git diff ref1 ref2, example:
  $ git diff 1287r86t4khsdc HEAD (last commit vs commit with id 1287r86t4khsdc)
  $ git diff HEAD HEAD^     (last commit vs last-1)
  $ git diff commitID1  commitID2 (changes between two arbitrary commits)

To show differences between local master branch and remote master branch:
  $ git diff master origin/master    (compares local master vs remote master)

Git doesn't allow to pull if you have changes in staging area that are yet to be commited

Working all the time in the master branch is not best practice
The idea behing branches is to work on a branch for every particular feature and then merge to the master branch

to list existing branches: 
  $ git branch -a (list local and remote branch)

to create new branch:
  $ git branch mynewbranch

to move to the new branch:
  $ git checkout mynewbranch

to see what happend:
  $ git log --decorate --oneline

to return to master: 
  $ git checkout master

to rename a branch:
  $ git branch -m nombreviejo nombrenuevo

to delete a branch:
 $ git branch -d newbranch (need to be in a different branch)

Branching and Merging
To see only local branches
 $ git branch

To create a branch and chekout to it in the same command:
  $ git checkout -b newfeature

Workflow for creating a new branch, making changes and merging back to master branch:
 1. Suppose we have a text file story.txt with just a title in it and we make a branch to add an introduction
    $ touch story.txt  (created file on master branch)
    $ echo 'My git story'  >> story.txt (added title on master branch)
    $ git status 8shows we have a new untracked file)
    $ git add story.txt (to start tracking the file)
    $ git commit -m 'Added story.txt with  title'   (changes saved to local repository)
    $ git push (changes saved to remote repository)
    $ git -b introduction    (created new branch to work on the introduction)
    $ echo 'once upon a time...'>> cuento.txt
    $ git status      (we can see story.txt has changed)
    $ git add story.txt    (add changes on story.txt to staging area in introduction branch)
    $ git commit -m 'added introduction'   (save changes to local repository, in introduction branch)
    $ git log --decorate --oneline (we should see our branch is ahead of master and master origin)
    $ git checkout master  (go back to master branch)
  We should first see what are the differences between master branch and introduction branch by using diff
    $ git diff master introduction
  Having seen the differences between the two branches we proceed to merge:
    $ git merge introduction
  Git says it was a fast forward merge, this only happens when there are no changes in target branch  during the work in the other branch (introduction in this example) branch so it only adds the commits to the master branch as if the introduction branch was never created
    
   NOTA: HEAD is a reference to the last commit in the currently checked-out branch.

   $ log --decorated --oneline --graph (to see current status, local master and introducion are ahead of remote origin master)
  
Since we have merged introduction with master branch, we can delete introduction, there is no point in keeping it:
  $ git branch -d introduction

If we want to disable fast forward to show explicitly that a branch was merged:
 $ git merge introduction --no-ff (it shows as a merge commit, with it's corresponding message)

Next step is to create a branch, make changes in that branch while also making changes to master branch and then merging
 $ git branch -b chapt1
make changes in chapt1, make changes in master 
 $ git checkout master
 $ git merge chapt1 -m 'commit message'
 $ git log --oneline --decorate --graph --all (to see what happened)	

MERGE CONFLICTS!!!
Ahora si empieza el cagadero, what happens when git can't automatically merge branches?
 1. checkout new branch corregir_intro
 2. make changes in corregir intro (add an commit)
 3. checkout master
 4. make changes in master to same file, wee need conflicts! (add and commit)
 4.5 $ git log --decorate --online 
 4.6 $ git diff master corregir_intro
 5. git merge corregir-intro
!!! MERGE CONFLICTS¡¡¡ git tries and fails to merge
We are now in a merging state, we need to edit the file to resolve conflicts, save it , add changes to staging area and commit changes
git will save a copy .orig of merge conflict

we should add *.orig to .gitignore

delete branch


Once we have a clean working directory and want to push to origin master:
1. verify we are in branch master 
  $ git branch
2. see if there are any changes in origin master 
  $ git pull
3. push changes 
  $ git push origin master

Advanced topics not covered this time:
 Rebase: If you area working in a branch while master undergoes changes, you use rebase to pull changes from master into your branch so you keep working on top of it
 Stashing: you can 

 


